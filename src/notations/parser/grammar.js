// Generated automatically by nearley
// http://github.com/Hardmath123/nearley
function id(x) {return x[0]; }


function mirror( throws ){

    return throws.concat( throws.map( action => action.map( release => release.map(({ value, cross }) => ({ value, cross })) ).reverse() ));

}

function numerify( letter ){

   if( letter < "a" )
      return letter.charCodeAt(0) - "A".charCodeAt(0) + 36;
   else
      return letter.charCodeAt(0) - "a".charCodeAt(0) + 10;

}

function finaliseAsync( throws ){

    return throws.map( ([release]) => [release.map( ({value}) => ({ value, handFrom: 0, handTo: 0 }) )] );

}

function finaliseSync( throws ){

    return throws.map( action => action.map((release, i) => release.map( ({value, cross}) => ({ value: value / 2, handFrom: i, handTo: cross ? 1 - i : i }) )) );

}

var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "digit", "symbols": [/[0-9]/], "postprocess": ([match]) => Number(match)},
    {"name": "digit_even", "symbols": [/[02468]/], "postprocess": ([match]) => Number(match)},
    {"name": "letter", "symbols": [/[a-zA-Z]/], "postprocess": id},
    {"name": "letter_even", "symbols": [/[acegikmoqsuwyACEGIKMOQSUWY]/], "postprocess": id},
    {"name": "integer", "symbols": [/[0-9]/], "postprocess": ([match]) => Number(match)},
    {"name": "integer$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "integer$ebnf$1", "symbols": ["integer$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "integer", "symbols": [/[1-9]/, "integer$ebnf$1"], "postprocess": ([first, rest]) => Number([first, ...rest].join(""))},
    {"name": "integer_even", "symbols": [/[02468]/], "postprocess": ([match]) => Number(match)},
    {"name": "integer_even$ebnf$1", "symbols": []},
    {"name": "integer_even$ebnf$1", "symbols": ["integer_even$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "integer_even", "symbols": [/[1-9]/, "integer_even$ebnf$1", /[02468]/], "postprocess": ([first, rest, last]) => Number([first, ...rest, last].join(""))},
    {"name": "cross", "symbols": [{"literal":"x"}], "postprocess": () => true},
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", {"literal":" "}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": () => null},
    {"name": "standard_async$macrocall$2$macrocall$2$macrocall$2", "symbols": ["standard_async_toss"]},
    {"name": "standard_async$macrocall$2$macrocall$2$macrocall$3", "symbols": [{"literal":","}]},
    {"name": "standard_async$macrocall$2$macrocall$2$macrocall$1", "symbols": ["standard_async$macrocall$2$macrocall$2$macrocall$2"], "postprocess": id},
    {"name": "standard_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$1", "symbols": ["_", "standard_async$macrocall$2$macrocall$2$macrocall$3", "_", "standard_async$macrocall$2$macrocall$2$macrocall$2"]},
    {"name": "standard_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1", "symbols": ["standard_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$1"]},
    {"name": "standard_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$2", "symbols": ["_", "standard_async$macrocall$2$macrocall$2$macrocall$3", "_", "standard_async$macrocall$2$macrocall$2$macrocall$2"]},
    {"name": "standard_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1", "symbols": ["standard_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1", "standard_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "standard_async$macrocall$2$macrocall$2$macrocall$1", "symbols": [{"literal":"["}, "_", "standard_async$macrocall$2$macrocall$2$macrocall$2", "standard_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1", "_", {"literal":"]"}], "postprocess": ([, , [first], rest]) => [first, ...rest.map(([,,,[toss]]) => toss)]},
    {"name": "standard_async$macrocall$2$macrocall$2", "symbols": ["standard_async$macrocall$2$macrocall$2$macrocall$1"]},
    {"name": "standard_async$macrocall$2$macrocall$3", "symbols": [{"literal":","}]},
    {"name": "standard_async$macrocall$2$macrocall$1$macrocall$2", "symbols": ["standard_async$macrocall$2$macrocall$2"]},
    {"name": "standard_async$macrocall$2$macrocall$1$macrocall$3", "symbols": ["standard_async$macrocall$2$macrocall$3"]},
    {"name": "standard_async$macrocall$2$macrocall$1$macrocall$1$ebnf$1", "symbols": []},
    {"name": "standard_async$macrocall$2$macrocall$1$macrocall$1$ebnf$1$subexpression$1", "symbols": ["_", "standard_async$macrocall$2$macrocall$1$macrocall$3", "_", "standard_async$macrocall$2$macrocall$1$macrocall$2"]},
    {"name": "standard_async$macrocall$2$macrocall$1$macrocall$1$ebnf$1", "symbols": ["standard_async$macrocall$2$macrocall$1$macrocall$1$ebnf$1", "standard_async$macrocall$2$macrocall$1$macrocall$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "standard_async$macrocall$2$macrocall$1$macrocall$1", "symbols": ["standard_async$macrocall$2$macrocall$1$macrocall$2", "standard_async$macrocall$2$macrocall$1$macrocall$1$ebnf$1"], "postprocess": ([[first], rest]) => [first, ...rest.map(([,,,[toss]]) => toss)]},
    {"name": "standard_async$macrocall$2$macrocall$1", "symbols": ["standard_async$macrocall$2$macrocall$1$macrocall$1"], "postprocess": id},
    {"name": "standard_async$macrocall$2", "symbols": ["standard_async$macrocall$2$macrocall$1"]},
    {"name": "standard_async$macrocall$1", "symbols": ["_", "standard_async$macrocall$2", "_"], "postprocess": ([, [match]]) => match},
    {"name": "standard_async", "symbols": ["standard_async$macrocall$1"], "postprocess": ([throws])  => finaliseAsync(throws)},
    {"name": "standard_async$macrocall$4$macrocall$2$macrocall$2", "symbols": ["standard_async_toss"]},
    {"name": "standard_async$macrocall$4$macrocall$2$macrocall$3", "symbols": [{"literal":" "}]},
    {"name": "standard_async$macrocall$4$macrocall$2$macrocall$1", "symbols": ["standard_async$macrocall$4$macrocall$2$macrocall$2"], "postprocess": id},
    {"name": "standard_async$macrocall$4$macrocall$2$macrocall$1$ebnf$1$subexpression$1", "symbols": ["_", "standard_async$macrocall$4$macrocall$2$macrocall$3", "_", "standard_async$macrocall$4$macrocall$2$macrocall$2"]},
    {"name": "standard_async$macrocall$4$macrocall$2$macrocall$1$ebnf$1", "symbols": ["standard_async$macrocall$4$macrocall$2$macrocall$1$ebnf$1$subexpression$1"]},
    {"name": "standard_async$macrocall$4$macrocall$2$macrocall$1$ebnf$1$subexpression$2", "symbols": ["_", "standard_async$macrocall$4$macrocall$2$macrocall$3", "_", "standard_async$macrocall$4$macrocall$2$macrocall$2"]},
    {"name": "standard_async$macrocall$4$macrocall$2$macrocall$1$ebnf$1", "symbols": ["standard_async$macrocall$4$macrocall$2$macrocall$1$ebnf$1", "standard_async$macrocall$4$macrocall$2$macrocall$1$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "standard_async$macrocall$4$macrocall$2$macrocall$1", "symbols": [{"literal":"["}, "_", "standard_async$macrocall$4$macrocall$2$macrocall$2", "standard_async$macrocall$4$macrocall$2$macrocall$1$ebnf$1", "_", {"literal":"]"}], "postprocess": ([, , [first], rest]) => [first, ...rest.map(([,,,[toss]]) => toss)]},
    {"name": "standard_async$macrocall$4$macrocall$2", "symbols": ["standard_async$macrocall$4$macrocall$2$macrocall$1"]},
    {"name": "standard_async$macrocall$4$macrocall$3", "symbols": [{"literal":" "}]},
    {"name": "standard_async$macrocall$4$macrocall$1$macrocall$2", "symbols": ["standard_async$macrocall$4$macrocall$2"]},
    {"name": "standard_async$macrocall$4$macrocall$1$macrocall$3", "symbols": ["standard_async$macrocall$4$macrocall$3"]},
    {"name": "standard_async$macrocall$4$macrocall$1$macrocall$1$ebnf$1", "symbols": []},
    {"name": "standard_async$macrocall$4$macrocall$1$macrocall$1$ebnf$1$subexpression$1", "symbols": ["_", "standard_async$macrocall$4$macrocall$1$macrocall$3", "_", "standard_async$macrocall$4$macrocall$1$macrocall$2"]},
    {"name": "standard_async$macrocall$4$macrocall$1$macrocall$1$ebnf$1", "symbols": ["standard_async$macrocall$4$macrocall$1$macrocall$1$ebnf$1", "standard_async$macrocall$4$macrocall$1$macrocall$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "standard_async$macrocall$4$macrocall$1$macrocall$1", "symbols": ["standard_async$macrocall$4$macrocall$1$macrocall$2", "standard_async$macrocall$4$macrocall$1$macrocall$1$ebnf$1"], "postprocess": ([[first], rest]) => [first, ...rest.map(([,,,[toss]]) => toss)]},
    {"name": "standard_async$macrocall$4$macrocall$1", "symbols": ["standard_async$macrocall$4$macrocall$1$macrocall$1"], "postprocess": id},
    {"name": "standard_async$macrocall$4", "symbols": ["standard_async$macrocall$4$macrocall$1"]},
    {"name": "standard_async$macrocall$3", "symbols": ["_", "standard_async$macrocall$4", "_"], "postprocess": ([, [match]]) => match},
    {"name": "standard_async", "symbols": ["standard_async$macrocall$3"], "postprocess": ([throws])  => finaliseAsync(throws)},
    {"name": "standard_async_toss", "symbols": ["integer"], "postprocess": ([value]) => ({ value })},
    {"name": "standard_sync$macrocall$2$macrocall$2$macrocall$2", "symbols": ["standard_sync_toss"]},
    {"name": "standard_sync$macrocall$2$macrocall$2$macrocall$3", "symbols": [{"literal":","}]},
    {"name": "standard_sync$macrocall$2$macrocall$2$macrocall$1", "symbols": ["standard_sync$macrocall$2$macrocall$2$macrocall$2"], "postprocess": id},
    {"name": "standard_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$1", "symbols": ["_", "standard_sync$macrocall$2$macrocall$2$macrocall$3", "_", "standard_sync$macrocall$2$macrocall$2$macrocall$2"]},
    {"name": "standard_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1", "symbols": ["standard_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$1"]},
    {"name": "standard_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$2", "symbols": ["_", "standard_sync$macrocall$2$macrocall$2$macrocall$3", "_", "standard_sync$macrocall$2$macrocall$2$macrocall$2"]},
    {"name": "standard_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1", "symbols": ["standard_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1", "standard_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "standard_sync$macrocall$2$macrocall$2$macrocall$1", "symbols": [{"literal":"["}, "_", "standard_sync$macrocall$2$macrocall$2$macrocall$2", "standard_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1", "_", {"literal":"]"}], "postprocess": ([, , [first], rest]) => [first, ...rest.map(([,,,[toss]]) => toss)]},
    {"name": "standard_sync$macrocall$2$macrocall$2", "symbols": ["standard_sync$macrocall$2$macrocall$2$macrocall$1"]},
    {"name": "standard_sync$macrocall$2$macrocall$3", "symbols": [{"literal":","}]},
    {"name": "standard_sync$macrocall$2$macrocall$1$macrocall$2$macrocall$2", "symbols": ["standard_sync$macrocall$2$macrocall$2"]},
    {"name": "standard_sync$macrocall$2$macrocall$1$macrocall$2$macrocall$3", "symbols": ["standard_sync$macrocall$2$macrocall$3"]},
    {"name": "standard_sync$macrocall$2$macrocall$1$macrocall$2$macrocall$1", "symbols": [{"literal":"("}, "_", "standard_sync$macrocall$2$macrocall$1$macrocall$2$macrocall$2", "_", "standard_sync$macrocall$2$macrocall$1$macrocall$2$macrocall$3", "_", "standard_sync$macrocall$2$macrocall$1$macrocall$2$macrocall$2", "_", {"literal":")"}], "postprocess": ([, , [[release1]], , , , [[release2]]]) => [release1, release2]},
    {"name": "standard_sync$macrocall$2$macrocall$1$macrocall$2", "symbols": ["standard_sync$macrocall$2$macrocall$1$macrocall$2$macrocall$1"]},
    {"name": "standard_sync$macrocall$2$macrocall$1$macrocall$3", "symbols": ["_"]},
    {"name": "standard_sync$macrocall$2$macrocall$1$macrocall$1$ebnf$1", "symbols": []},
    {"name": "standard_sync$macrocall$2$macrocall$1$macrocall$1$ebnf$1$subexpression$1", "symbols": ["standard_sync$macrocall$2$macrocall$1$macrocall$3", "standard_sync$macrocall$2$macrocall$1$macrocall$2"]},
    {"name": "standard_sync$macrocall$2$macrocall$1$macrocall$1$ebnf$1", "symbols": ["standard_sync$macrocall$2$macrocall$1$macrocall$1$ebnf$1", "standard_sync$macrocall$2$macrocall$1$macrocall$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "standard_sync$macrocall$2$macrocall$1$macrocall$1", "symbols": ["standard_sync$macrocall$2$macrocall$1$macrocall$2", "standard_sync$macrocall$2$macrocall$1$macrocall$1$ebnf$1"], "postprocess": ([[first], rest]) => [first, ...rest.map(([,[toss]]) => toss)]},
    {"name": "standard_sync$macrocall$2$macrocall$1$ebnf$1", "symbols": [{"literal":"*"}], "postprocess": id},
    {"name": "standard_sync$macrocall$2$macrocall$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "standard_sync$macrocall$2$macrocall$1", "symbols": ["standard_sync$macrocall$2$macrocall$1$macrocall$1", "_", "standard_sync$macrocall$2$macrocall$1$ebnf$1"], "postprocess": ([actions, , mirrored]) => mirrored ? mirror(actions) : actions},
    {"name": "standard_sync$macrocall$2", "symbols": ["standard_sync$macrocall$2$macrocall$1"]},
    {"name": "standard_sync$macrocall$1", "symbols": ["_", "standard_sync$macrocall$2", "_"], "postprocess": ([, [match]]) => match},
    {"name": "standard_sync", "symbols": ["standard_sync$macrocall$1"], "postprocess": ([throws]) => finaliseSync(throws)},
    {"name": "standard_sync$macrocall$4$macrocall$2$macrocall$2", "symbols": ["standard_sync_toss"]},
    {"name": "standard_sync$macrocall$4$macrocall$2$macrocall$3", "symbols": [{"literal":" "}]},
    {"name": "standard_sync$macrocall$4$macrocall$2$macrocall$1", "symbols": ["standard_sync$macrocall$4$macrocall$2$macrocall$2"], "postprocess": id},
    {"name": "standard_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1$subexpression$1", "symbols": ["_", "standard_sync$macrocall$4$macrocall$2$macrocall$3", "_", "standard_sync$macrocall$4$macrocall$2$macrocall$2"]},
    {"name": "standard_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1", "symbols": ["standard_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1$subexpression$1"]},
    {"name": "standard_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1$subexpression$2", "symbols": ["_", "standard_sync$macrocall$4$macrocall$2$macrocall$3", "_", "standard_sync$macrocall$4$macrocall$2$macrocall$2"]},
    {"name": "standard_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1", "symbols": ["standard_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1", "standard_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "standard_sync$macrocall$4$macrocall$2$macrocall$1", "symbols": [{"literal":"["}, "_", "standard_sync$macrocall$4$macrocall$2$macrocall$2", "standard_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1", "_", {"literal":"]"}], "postprocess": ([, , [first], rest]) => [first, ...rest.map(([,,,[toss]]) => toss)]},
    {"name": "standard_sync$macrocall$4$macrocall$2", "symbols": ["standard_sync$macrocall$4$macrocall$2$macrocall$1"]},
    {"name": "standard_sync$macrocall$4$macrocall$3", "symbols": [{"literal":" "}]},
    {"name": "standard_sync$macrocall$4$macrocall$1$macrocall$2$macrocall$2", "symbols": ["standard_sync$macrocall$4$macrocall$2"]},
    {"name": "standard_sync$macrocall$4$macrocall$1$macrocall$2$macrocall$3", "symbols": ["standard_sync$macrocall$4$macrocall$3"]},
    {"name": "standard_sync$macrocall$4$macrocall$1$macrocall$2$macrocall$1", "symbols": [{"literal":"("}, "_", "standard_sync$macrocall$4$macrocall$1$macrocall$2$macrocall$2", "_", "standard_sync$macrocall$4$macrocall$1$macrocall$2$macrocall$3", "_", "standard_sync$macrocall$4$macrocall$1$macrocall$2$macrocall$2", "_", {"literal":")"}], "postprocess": ([, , [[release1]], , , , [[release2]]]) => [release1, release2]},
    {"name": "standard_sync$macrocall$4$macrocall$1$macrocall$2", "symbols": ["standard_sync$macrocall$4$macrocall$1$macrocall$2$macrocall$1"]},
    {"name": "standard_sync$macrocall$4$macrocall$1$macrocall$3", "symbols": ["_"]},
    {"name": "standard_sync$macrocall$4$macrocall$1$macrocall$1$ebnf$1", "symbols": []},
    {"name": "standard_sync$macrocall$4$macrocall$1$macrocall$1$ebnf$1$subexpression$1", "symbols": ["standard_sync$macrocall$4$macrocall$1$macrocall$3", "standard_sync$macrocall$4$macrocall$1$macrocall$2"]},
    {"name": "standard_sync$macrocall$4$macrocall$1$macrocall$1$ebnf$1", "symbols": ["standard_sync$macrocall$4$macrocall$1$macrocall$1$ebnf$1", "standard_sync$macrocall$4$macrocall$1$macrocall$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "standard_sync$macrocall$4$macrocall$1$macrocall$1", "symbols": ["standard_sync$macrocall$4$macrocall$1$macrocall$2", "standard_sync$macrocall$4$macrocall$1$macrocall$1$ebnf$1"], "postprocess": ([[first], rest]) => [first, ...rest.map(([,[toss]]) => toss)]},
    {"name": "standard_sync$macrocall$4$macrocall$1$ebnf$1", "symbols": [{"literal":"*"}], "postprocess": id},
    {"name": "standard_sync$macrocall$4$macrocall$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "standard_sync$macrocall$4$macrocall$1", "symbols": ["standard_sync$macrocall$4$macrocall$1$macrocall$1", "_", "standard_sync$macrocall$4$macrocall$1$ebnf$1"], "postprocess": ([actions, , mirrored]) => mirrored ? mirror(actions) : actions},
    {"name": "standard_sync$macrocall$4", "symbols": ["standard_sync$macrocall$4$macrocall$1"]},
    {"name": "standard_sync$macrocall$3", "symbols": ["_", "standard_sync$macrocall$4", "_"], "postprocess": ([, [match]]) => match},
    {"name": "standard_sync", "symbols": ["standard_sync$macrocall$3"], "postprocess": ([throws]) => finaliseSync(throws)},
    {"name": "standard_sync_toss$ebnf$1", "symbols": ["cross"], "postprocess": id},
    {"name": "standard_sync_toss$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "standard_sync_toss", "symbols": ["integer_even", "standard_sync_toss$ebnf$1"], "postprocess": ([value, cross]) => ({ value: value, cross: !!cross })},
    {"name": "compressed_async$macrocall$2$macrocall$2$macrocall$2", "symbols": ["compressed_async_toss"]},
    {"name": "compressed_async$macrocall$2$macrocall$2$macrocall$3", "symbols": []},
    {"name": "compressed_async$macrocall$2$macrocall$2$macrocall$1", "symbols": ["compressed_async$macrocall$2$macrocall$2$macrocall$2"], "postprocess": id},
    {"name": "compressed_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$1", "symbols": ["compressed_async$macrocall$2$macrocall$2$macrocall$3", "compressed_async$macrocall$2$macrocall$2$macrocall$2"]},
    {"name": "compressed_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1", "symbols": ["compressed_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$1"]},
    {"name": "compressed_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$2", "symbols": ["compressed_async$macrocall$2$macrocall$2$macrocall$3", "compressed_async$macrocall$2$macrocall$2$macrocall$2"]},
    {"name": "compressed_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1", "symbols": ["compressed_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1", "compressed_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "compressed_async$macrocall$2$macrocall$2$macrocall$1", "symbols": [{"literal":"["}, "compressed_async$macrocall$2$macrocall$2$macrocall$2", "compressed_async$macrocall$2$macrocall$2$macrocall$1$ebnf$1", {"literal":"]"}], "postprocess": ([, [first], rest]) => [first, ...rest.map(([,[toss]]) => toss)]},
    {"name": "compressed_async$macrocall$2$macrocall$2", "symbols": ["compressed_async$macrocall$2$macrocall$2$macrocall$1"]},
    {"name": "compressed_async$macrocall$2$macrocall$3", "symbols": []},
    {"name": "compressed_async$macrocall$2$macrocall$1$macrocall$2", "symbols": ["compressed_async$macrocall$2$macrocall$2"]},
    {"name": "compressed_async$macrocall$2$macrocall$1$macrocall$3", "symbols": ["compressed_async$macrocall$2$macrocall$3"]},
    {"name": "compressed_async$macrocall$2$macrocall$1$macrocall$1$ebnf$1", "symbols": []},
    {"name": "compressed_async$macrocall$2$macrocall$1$macrocall$1$ebnf$1$subexpression$1", "symbols": ["compressed_async$macrocall$2$macrocall$1$macrocall$3", "compressed_async$macrocall$2$macrocall$1$macrocall$2"]},
    {"name": "compressed_async$macrocall$2$macrocall$1$macrocall$1$ebnf$1", "symbols": ["compressed_async$macrocall$2$macrocall$1$macrocall$1$ebnf$1", "compressed_async$macrocall$2$macrocall$1$macrocall$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "compressed_async$macrocall$2$macrocall$1$macrocall$1", "symbols": ["compressed_async$macrocall$2$macrocall$1$macrocall$2", "compressed_async$macrocall$2$macrocall$1$macrocall$1$ebnf$1"], "postprocess": ([[first], rest]) => [first, ...rest.map(([,[toss]]) => toss)]},
    {"name": "compressed_async$macrocall$2$macrocall$1", "symbols": ["compressed_async$macrocall$2$macrocall$1$macrocall$1"], "postprocess": id},
    {"name": "compressed_async$macrocall$2", "symbols": ["compressed_async$macrocall$2$macrocall$1"]},
    {"name": "compressed_async$macrocall$1", "symbols": ["_", "compressed_async$macrocall$2", "_"], "postprocess": ([, [match]]) => match},
    {"name": "compressed_async", "symbols": ["compressed_async$macrocall$1"], "postprocess": ([throws]) => finaliseAsync(throws)},
    {"name": "compressed_async_toss", "symbols": ["digit"], "postprocess": ([value]) => ({ value })},
    {"name": "compressed_async_toss", "symbols": ["letter"], "postprocess": ([value]) => ({ value: numerify(value) })},
    {"name": "compressed_sync$macrocall$2$macrocall$2$macrocall$2", "symbols": ["compressed_sync_toss"]},
    {"name": "compressed_sync$macrocall$2$macrocall$2$macrocall$3", "symbols": []},
    {"name": "compressed_sync$macrocall$2$macrocall$2$macrocall$1", "symbols": ["compressed_sync$macrocall$2$macrocall$2$macrocall$2"], "postprocess": id},
    {"name": "compressed_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$1", "symbols": ["compressed_sync$macrocall$2$macrocall$2$macrocall$3", "compressed_sync$macrocall$2$macrocall$2$macrocall$2"]},
    {"name": "compressed_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1", "symbols": ["compressed_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$1"]},
    {"name": "compressed_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$2", "symbols": ["compressed_sync$macrocall$2$macrocall$2$macrocall$3", "compressed_sync$macrocall$2$macrocall$2$macrocall$2"]},
    {"name": "compressed_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1", "symbols": ["compressed_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1", "compressed_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "compressed_sync$macrocall$2$macrocall$2$macrocall$1", "symbols": [{"literal":"["}, "compressed_sync$macrocall$2$macrocall$2$macrocall$2", "compressed_sync$macrocall$2$macrocall$2$macrocall$1$ebnf$1", {"literal":"]"}], "postprocess": ([, [first], rest]) => [first, ...rest.map(([,[toss]]) => toss)]},
    {"name": "compressed_sync$macrocall$2$macrocall$2", "symbols": ["compressed_sync$macrocall$2$macrocall$2$macrocall$1"]},
    {"name": "compressed_sync$macrocall$2$macrocall$3", "symbols": [{"literal":","}]},
    {"name": "compressed_sync$macrocall$2$macrocall$1$ebnf$1$macrocall$2", "symbols": ["compressed_sync$macrocall$2$macrocall$2"]},
    {"name": "compressed_sync$macrocall$2$macrocall$1$ebnf$1$macrocall$3", "symbols": ["compressed_sync$macrocall$2$macrocall$3"]},
    {"name": "compressed_sync$macrocall$2$macrocall$1$ebnf$1$macrocall$1", "symbols": [{"literal":"("}, "compressed_sync$macrocall$2$macrocall$1$ebnf$1$macrocall$2", "compressed_sync$macrocall$2$macrocall$1$ebnf$1$macrocall$3", "compressed_sync$macrocall$2$macrocall$1$ebnf$1$macrocall$2", {"literal":")"}], "postprocess": ([, [[release1]], , [[release2]]]) => [release1, release2]},
    {"name": "compressed_sync$macrocall$2$macrocall$1$ebnf$1", "symbols": ["compressed_sync$macrocall$2$macrocall$1$ebnf$1$macrocall$1"]},
    {"name": "compressed_sync$macrocall$2$macrocall$1$ebnf$1$macrocall$5", "symbols": ["compressed_sync$macrocall$2$macrocall$2"]},
    {"name": "compressed_sync$macrocall$2$macrocall$1$ebnf$1$macrocall$6", "symbols": ["compressed_sync$macrocall$2$macrocall$3"]},
    {"name": "compressed_sync$macrocall$2$macrocall$1$ebnf$1$macrocall$4", "symbols": [{"literal":"("}, "compressed_sync$macrocall$2$macrocall$1$ebnf$1$macrocall$5", "compressed_sync$macrocall$2$macrocall$1$ebnf$1$macrocall$6", "compressed_sync$macrocall$2$macrocall$1$ebnf$1$macrocall$5", {"literal":")"}], "postprocess": ([, [[release1]], , [[release2]]]) => [release1, release2]},
    {"name": "compressed_sync$macrocall$2$macrocall$1$ebnf$1", "symbols": ["compressed_sync$macrocall$2$macrocall$1$ebnf$1", "compressed_sync$macrocall$2$macrocall$1$ebnf$1$macrocall$4"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "compressed_sync$macrocall$2$macrocall$1$ebnf$2", "symbols": [{"literal":"*"}], "postprocess": id},
    {"name": "compressed_sync$macrocall$2$macrocall$1$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "compressed_sync$macrocall$2$macrocall$1", "symbols": ["compressed_sync$macrocall$2$macrocall$1$ebnf$1", "compressed_sync$macrocall$2$macrocall$1$ebnf$2"], "postprocess": ([actions, mirrored])   => mirrored ? mirror(actions) : actions},
    {"name": "compressed_sync$macrocall$2", "symbols": ["compressed_sync$macrocall$2$macrocall$1"]},
    {"name": "compressed_sync$macrocall$1", "symbols": ["_", "compressed_sync$macrocall$2", "_"], "postprocess": ([, [match]]) => match},
    {"name": "compressed_sync", "symbols": ["compressed_sync$macrocall$1"], "postprocess": ([throws]) => finaliseSync(throws)},
    {"name": "compressed_sync$macrocall$4$macrocall$2$macrocall$2", "symbols": ["compressed_sync_toss"]},
    {"name": "compressed_sync$macrocall$4$macrocall$2$macrocall$3", "symbols": []},
    {"name": "compressed_sync$macrocall$4$macrocall$2$macrocall$1", "symbols": ["compressed_sync$macrocall$4$macrocall$2$macrocall$2"], "postprocess": id},
    {"name": "compressed_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1$subexpression$1", "symbols": ["compressed_sync$macrocall$4$macrocall$2$macrocall$3", "compressed_sync$macrocall$4$macrocall$2$macrocall$2"]},
    {"name": "compressed_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1", "symbols": ["compressed_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1$subexpression$1"]},
    {"name": "compressed_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1$subexpression$2", "symbols": ["compressed_sync$macrocall$4$macrocall$2$macrocall$3", "compressed_sync$macrocall$4$macrocall$2$macrocall$2"]},
    {"name": "compressed_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1", "symbols": ["compressed_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1", "compressed_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "compressed_sync$macrocall$4$macrocall$2$macrocall$1", "symbols": [{"literal":"["}, "compressed_sync$macrocall$4$macrocall$2$macrocall$2", "compressed_sync$macrocall$4$macrocall$2$macrocall$1$ebnf$1", {"literal":"]"}], "postprocess": ([, [first], rest]) => [first, ...rest.map(([,[toss]]) => toss)]},
    {"name": "compressed_sync$macrocall$4$macrocall$2", "symbols": ["compressed_sync$macrocall$4$macrocall$2$macrocall$1"]},
    {"name": "compressed_sync$macrocall$4$macrocall$3", "symbols": []},
    {"name": "compressed_sync$macrocall$4$macrocall$1$ebnf$1$macrocall$2", "symbols": ["compressed_sync$macrocall$4$macrocall$2"]},
    {"name": "compressed_sync$macrocall$4$macrocall$1$ebnf$1$macrocall$3", "symbols": ["compressed_sync$macrocall$4$macrocall$3"]},
    {"name": "compressed_sync$macrocall$4$macrocall$1$ebnf$1$macrocall$1", "symbols": [{"literal":"("}, "compressed_sync$macrocall$4$macrocall$1$ebnf$1$macrocall$2", "compressed_sync$macrocall$4$macrocall$1$ebnf$1$macrocall$3", "compressed_sync$macrocall$4$macrocall$1$ebnf$1$macrocall$2", {"literal":")"}], "postprocess": ([, [[release1]], , [[release2]]]) => [release1, release2]},
    {"name": "compressed_sync$macrocall$4$macrocall$1$ebnf$1", "symbols": ["compressed_sync$macrocall$4$macrocall$1$ebnf$1$macrocall$1"]},
    {"name": "compressed_sync$macrocall$4$macrocall$1$ebnf$1$macrocall$5", "symbols": ["compressed_sync$macrocall$4$macrocall$2"]},
    {"name": "compressed_sync$macrocall$4$macrocall$1$ebnf$1$macrocall$6", "symbols": ["compressed_sync$macrocall$4$macrocall$3"]},
    {"name": "compressed_sync$macrocall$4$macrocall$1$ebnf$1$macrocall$4", "symbols": [{"literal":"("}, "compressed_sync$macrocall$4$macrocall$1$ebnf$1$macrocall$5", "compressed_sync$macrocall$4$macrocall$1$ebnf$1$macrocall$6", "compressed_sync$macrocall$4$macrocall$1$ebnf$1$macrocall$5", {"literal":")"}], "postprocess": ([, [[release1]], , [[release2]]]) => [release1, release2]},
    {"name": "compressed_sync$macrocall$4$macrocall$1$ebnf$1", "symbols": ["compressed_sync$macrocall$4$macrocall$1$ebnf$1", "compressed_sync$macrocall$4$macrocall$1$ebnf$1$macrocall$4"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "compressed_sync$macrocall$4$macrocall$1$ebnf$2", "symbols": [{"literal":"*"}], "postprocess": id},
    {"name": "compressed_sync$macrocall$4$macrocall$1$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "compressed_sync$macrocall$4$macrocall$1", "symbols": ["compressed_sync$macrocall$4$macrocall$1$ebnf$1", "compressed_sync$macrocall$4$macrocall$1$ebnf$2"], "postprocess": ([actions, mirrored])   => mirrored ? mirror(actions) : actions},
    {"name": "compressed_sync$macrocall$4", "symbols": ["compressed_sync$macrocall$4$macrocall$1"]},
    {"name": "compressed_sync$macrocall$3", "symbols": ["_", "compressed_sync$macrocall$4", "_"], "postprocess": ([, [match]]) => match},
    {"name": "compressed_sync", "symbols": ["compressed_sync$macrocall$3"], "postprocess": ([throws]) => finaliseSync(throws)},
    {"name": "compressed_sync_toss$ebnf$1", "symbols": ["cross"], "postprocess": id},
    {"name": "compressed_sync_toss$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "compressed_sync_toss", "symbols": ["digit_even", "compressed_sync_toss$ebnf$1"], "postprocess": ([value, cross]) => ({ value,                  cross: !!cross })},
    {"name": "compressed_sync_toss$ebnf$2", "symbols": ["cross"], "postprocess": id},
    {"name": "compressed_sync_toss$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "compressed_sync_toss", "symbols": ["letter_even", "compressed_sync_toss$ebnf$2"], "postprocess": ([value, cross]) => ({ value: numerify(value), cross: !!cross })}
]
  , ParserStart: "digit"
}
export { grammar };
